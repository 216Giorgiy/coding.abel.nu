#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestLib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="test")]
	public partial class DBContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertSex(Sex instance);
    partial void UpdateSex(Sex instance);
    partial void DeleteSex(Sex instance);
    partial void InsertFrequentDriver(FrequentDriver instance);
    partial void UpdateFrequentDriver(FrequentDriver instance);
    partial void DeleteFrequentDriver(FrequentDriver instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    #endregion
		
		public DBContext() : 
				base(global::TestLib.Properties.Settings.Default.testConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Sex> Sexes
		{
			get
			{
				return this.GetTable<Sex>();
			}
		}
		
		public System.Data.Linq.Table<FrequentDriver> FrequentDrivers
		{
			get
			{
				return this.GetTable<FrequentDriver>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Brand;
		
		private string _RegistrationNumber;
		
		private string _MadeIn;
		
		private int _OwnerID;
		
		private EntitySet<FrequentDriver> _FrequentDrivers;
		
		private EntitySet<FrequentDriver> _FrequentDrivers1;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnRegistrationNumberChanging(string value);
    partial void OnRegistrationNumberChanged();
    partial void OnMadeInChanging(string value);
    partial void OnMadeInChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    #endregion
		
		public Car()
		{
			this._FrequentDrivers = new EntitySet<FrequentDriver>(new Action<FrequentDriver>(this.attach_FrequentDrivers), new Action<FrequentDriver>(this.detach_FrequentDrivers));
			this._FrequentDrivers1 = new EntitySet<FrequentDriver>(new Action<FrequentDriver>(this.attach_FrequentDrivers1), new Action<FrequentDriver>(this.detach_FrequentDrivers1));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RegistrationNumber
		{
			get
			{
				return this._RegistrationNumber;
			}
			set
			{
				if ((this._RegistrationNumber != value))
				{
					this.OnRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNumber = value;
					this.SendPropertyChanged("RegistrationNumber");
					this.OnRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MadeIn", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MadeIn
		{
			get
			{
				return this._MadeIn;
			}
			set
			{
				if ((this._MadeIn != value))
				{
					this.OnMadeInChanging(value);
					this.SendPropertyChanging();
					this._MadeIn = value;
					this.SendPropertyChanged("MadeIn");
					this.OnMadeInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_FrequentDriver", Storage="_FrequentDrivers", ThisKey="RegistrationNumber", OtherKey="RegNo")]
		public EntitySet<FrequentDriver> FrequentDrivers
		{
			get
			{
				return this._FrequentDrivers;
			}
			set
			{
				this._FrequentDrivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_FrequentDriver1", Storage="_FrequentDrivers1", ThisKey="ID", OtherKey="CarID")]
		public EntitySet<FrequentDriver> FrequentDrivers1
		{
			get
			{
				return this._FrequentDrivers1;
			}
			set
			{
				this._FrequentDrivers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Car", Storage="_Person", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FrequentDrivers(FrequentDriver entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_FrequentDrivers(FrequentDriver entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_FrequentDrivers1(FrequentDriver entity)
		{
			this.SendPropertyChanging();
			entity.Car1 = this;
		}
		
		private void detach_FrequentDrivers1(FrequentDriver entity)
		{
			this.SendPropertyChanging();
			entity.Car1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _SSN;
		
		private string _PersonKey;
		
		private byte _SexID;
		
		private string _DisplayName;
		
		private PersonStatus _PersonStatus;
		
		private int _BornIn;
		
		private int _LivesIn;
		
		private EntitySet<Car> _Cars;
		
		private EntitySet<FrequentDriver> _FrequentDrivers;
		
		private EntityRef<Sex> _Sex;
		
		private EntityRef<City> _BornInCity;
		
		private EntityRef<City> _LivesInCity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSSNChanging(string value);
    partial void OnSSNChanged();
    partial void OnPersonKeyChanging(string value);
    partial void OnPersonKeyChanged();
    partial void OnSexIDChanging(byte value);
    partial void OnSexIDChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnPersonStatusChanging(PersonStatus value);
    partial void OnPersonStatusChanged();
    partial void OnBornInChanging(int value);
    partial void OnBornInChanged();
    partial void OnLivesInChanging(int value);
    partial void OnLivesInChanged();
    #endregion
		
		public Person()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._FrequentDrivers = new EntitySet<FrequentDriver>(new Action<FrequentDriver>(this.attach_FrequentDrivers), new Action<FrequentDriver>(this.detach_FrequentDrivers));
			this._Sex = default(EntityRef<Sex>);
			this._BornInCity = default(EntityRef<City>);
			this._LivesInCity = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonKey", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PersonKey
		{
			get
			{
				return this._PersonKey;
			}
			set
			{
				if ((this._PersonKey != value))
				{
					this.OnPersonKeyChanging(value);
					this.SendPropertyChanging();
					this._PersonKey = value;
					this.SendPropertyChanged("PersonKey");
					this.OnPersonKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexID", DbType="TinyInt NOT NULL")]
		public byte SexID
		{
			get
			{
				return this._SexID;
			}
			set
			{
				if ((this._SexID != value))
				{
					if (this._Sex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSexIDChanging(value);
					this.SendPropertyChanging();
					this._SexID = value;
					this.SendPropertyChanged("SexID");
					this.OnSexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonStatus", DbType="TinyInt", CanBeNull=true)]
		public PersonStatus PersonStatus
		{
			get
			{
				return this._PersonStatus;
			}
			set
			{
				if ((this._PersonStatus != value))
				{
					this.OnPersonStatusChanging(value);
					this.SendPropertyChanging();
					this._PersonStatus = value;
					this.SendPropertyChanged("PersonStatus");
					this.OnPersonStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornIn", DbType="Int NOT NULL")]
		public int BornIn
		{
			get
			{
				return this._BornIn;
			}
			set
			{
				if ((this._BornIn != value))
				{
					if (this._BornInCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBornInChanging(value);
					this.SendPropertyChanging();
					this._BornIn = value;
					this.SendPropertyChanged("BornIn");
					this.OnBornInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivesIn", DbType="Int NOT NULL")]
		public int LivesIn
		{
			get
			{
				return this._LivesIn;
			}
			set
			{
				if ((this._LivesIn != value))
				{
					if (this._LivesInCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLivesInChanging(value);
					this.SendPropertyChanging();
					this._LivesIn = value;
					this.SendPropertyChanged("LivesIn");
					this.OnLivesInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Car", Storage="_Cars", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_FrequentDriver", Storage="_FrequentDrivers", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<FrequentDriver> FrequentDrivers
		{
			get
			{
				return this._FrequentDrivers;
			}
			set
			{
				this._FrequentDrivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sex_Person", Storage="_Sex", ThisKey="SexID", OtherKey="ID", IsForeignKey=true)]
		public Sex Sex
		{
			get
			{
				return this._Sex.Entity;
			}
			set
			{
				Sex previousValue = this._Sex.Entity;
				if (((previousValue != value) 
							|| (this._Sex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sex.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Sex.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._SexID = value.ID;
					}
					else
					{
						this._SexID = default(byte);
					}
					this.SendPropertyChanged("Sex");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Person", Storage="_BornInCity", ThisKey="BornIn", OtherKey="CityID", IsForeignKey=true)]
		public City BornInCity
		{
			get
			{
				return this._BornInCity.Entity;
			}
			set
			{
				City previousValue = this._BornInCity.Entity;
				if (((previousValue != value) 
							|| (this._BornInCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BornInCity.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._BornInCity.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._BornIn = value.CityID;
					}
					else
					{
						this._BornIn = default(int);
					}
					this.SendPropertyChanged("BornInCity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Person1", Storage="_LivesInCity", ThisKey="LivesIn", OtherKey="CityID", IsForeignKey=true)]
		public City LivesInCity
		{
			get
			{
				return this._LivesInCity.Entity;
			}
			set
			{
				City previousValue = this._LivesInCity.Entity;
				if (((previousValue != value) 
							|| (this._LivesInCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LivesInCity.Entity = null;
						previousValue.Persons1.Remove(this);
					}
					this._LivesInCity.Entity = value;
					if ((value != null))
					{
						value.Persons1.Add(this);
						this._LivesIn = value.CityID;
					}
					else
					{
						this._LivesIn = default(int);
					}
					this.SendPropertyChanged("LivesInCity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_FrequentDrivers(FrequentDriver entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_FrequentDrivers(FrequentDriver entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sexes")]
	public partial class Sex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sex()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sex_Person", Storage="_Persons", ThisKey="ID", OtherKey="SexID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Sex = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Sex = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FrequentDrivers")]
	public partial class FrequentDriver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CarID;
		
		private int _PersonID;
		
		private string _RegNo;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Car> _Car1;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarIDChanging(int value);
    partial void OnCarIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnRegNoChanging(string value);
    partial void OnRegNoChanged();
    #endregion
		
		public FrequentDriver()
		{
			this._Car = default(EntityRef<Car>);
			this._Car1 = default(EntityRef<Car>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					if (this._Car1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNo", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RegNo
		{
			get
			{
				return this._RegNo;
			}
			set
			{
				if ((this._RegNo != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegNoChanging(value);
					this.SendPropertyChanging();
					this._RegNo = value;
					this.SendPropertyChanged("RegNo");
					this.OnRegNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_FrequentDriver", Storage="_Car", ThisKey="RegNo", OtherKey="RegistrationNumber", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.FrequentDrivers.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.FrequentDrivers.Add(this);
						this._RegNo = value.RegistrationNumber;
					}
					else
					{
						this._RegNo = default(string);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_FrequentDriver1", Storage="_Car1", ThisKey="CarID", OtherKey="ID", IsForeignKey=true)]
		public Car Car1
		{
			get
			{
				return this._Car1.Entity;
			}
			set
			{
				Car previousValue = this._Car1.Entity;
				if (((previousValue != value) 
							|| (this._Car1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car1.Entity = null;
						previousValue.FrequentDrivers1.Remove(this);
					}
					this._Car1.Entity = value;
					if ((value != null))
					{
						value.FrequentDrivers1.Add(this);
						this._CarID = value.ID;
					}
					else
					{
						this._CarID = default(int);
					}
					this.SendPropertyChanged("Car1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_FrequentDriver", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.FrequentDrivers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.FrequentDrivers.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Person> _Persons1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public City()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Persons1 = new EntitySet<Person>(new Action<Person>(this.attach_Persons1), new Action<Person>(this.detach_Persons1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Person", Storage="_Persons", ThisKey="CityID", OtherKey="BornIn")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Person1", Storage="_Persons1", ThisKey="CityID", OtherKey="LivesIn")]
		public EntitySet<Person> Persons1
		{
			get
			{
				return this._Persons1;
			}
			set
			{
				this._Persons1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.BornInCity = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.BornInCity = null;
		}
		
		private void attach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.LivesInCity = this;
		}
		
		private void detach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.LivesInCity = null;
		}
	}
}
#pragma warning restore 1591
